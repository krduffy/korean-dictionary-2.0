# This can seem magic-numbery, but for those interested in how to convert a unicode in the
# Korean Syllables unicode block to its constituent jamo, see the Wikipedia article below.
# https://en.wikipedia.org/wiki/Korean_language_and_computers#Hangul_in_Unicode
#
# From the article,
#  """
#  Pre-composed hangul syllables in the Unicode hangul syllables block are algorithmically
#  defined with the following formula:
#       [(initial) × 588 + (medial) × 28 + (final)] + 44032
#  """
HANGUL_BLOCK_OFFSET = 44032
초성_SCALAR = 588
중성_SCALAR = 28

초성_BLOCK_OFFSET = 0x1100
중성_BLOCK_OFFSET = 0x1161
종성_BLOCK_OFFSET = 0x11A7


# 안될거같은 불규칙.
# 빨갛다 -> 빨개


def 글자_조합(초성, 중성, 종성=None):

    초성_값 = ord(초성_찾기(초성)) - 초성_BLOCK_OFFSET
    중성_값 = ord(중성_찾기(중성)) - 중성_BLOCK_OFFSET
    # 0x11a7 instead of 0x11a8 to account for 0 possible
    종성_값 = ord(종성_찾기(종성)) - 종성_BLOCK_OFFSET if 종성 else 0

    return chr(
        초성_값 * 초성_SCALAR + 중성_값 * 중성_SCALAR + 종성_값 + HANGUL_BLOCK_OFFSET
    )


def 자모_추출(글자):
    # 글자

    글자값 = ord(글자)
    글자값 = 글자값 - HANGUL_BLOCK_OFFSET

    초성_값 = 글자값 // 초성_SCALAR
    글자값 -= 초성_값 * 초성_SCALAR

    중성_값 = 글자값 // 중성_SCALAR
    글자값 -= 중성_값 * 중성_SCALAR

    종성_값 = 글자값

    return {
        "초성": 호환용_자모_가져오기(chr(초성_값 + 초성_BLOCK_OFFSET)),
        "중성": 호환용_자모_가져오기(chr(중성_값 + 중성_BLOCK_OFFSET)),
        "종성": (
            호환용_자모_가져오기(chr(종성_값 + 종성_BLOCK_OFFSET))
            if 종성_값 != 0
            else None
        ),
    }


def 호환용_자모_확인(글자):
    if not 글자 or len(글자) != 1:
        return False

    코드 = ord(글자)
    # 호환용 자모 유니코드 범위 확인
    return 0x3131 <= 코드 <= 0x3163


def 호환용_자모_가져오기(비호환용_자모):
    return {
        "ᄀ": "ㄱ",
        "ᄁ": "ㄲ",
        "ᄂ": "ㄴ",
        "ᄃ": "ㄷ",
        "ᄄ": "ㄸ",
        "ᄅ": "ㄹ",
        "ᄆ": "ㅁ",
        "ᄇ": "ㅂ",
        "ᄈ": "ㅃ",
        "ᄉ": "ㅅ",
        "ᄊ": "ㅆ",
        "ᄋ": "ㅇ",
        "ᄌ": "ㅈ",
        "ᄍ": "ㅉ",
        "ᄎ": "ㅊ",
        "ᄏ": "ㅋ",
        "ᄐ": "ㅌ",
        "ᄑ": "ㅍ",
        "ᄒ": "ㅎ",
        "ᅡ": "ㅏ",
        "ᅢ": "ㅐ",
        "ᅣ": "ㅑ",
        "ᅤ": "ㅒ",
        "ᅥ": "ㅓ",
        "ᅦ": "ㅔ",
        "ᅧ": "ㅕ",
        "ᅨ": "ㅖ",
        "ᅩ": "ㅗ",
        "ᅪ": "ㅘ",
        "ᅫ": "ㅙ",
        "ᅬ": "ㅚ",
        "ᅭ": "ㅛ",
        "ᅮ": "ㅜ",
        "ᅯ": "ㅝ",
        "ᅰ": "ㅞ",
        "ᅱ": "ㅟ",
        "ᅲ": "ㅠ",
        "ᅳ": "ㅡ",
        "ᅴ": "ㅢ",
        "ᅵ": "ㅣ",
        "ᆨ": "ㄱ",
        "ᆩ": "ㄲ",
        "ᆪ": "ㄳ",
        "ᆫ": "ㄴ",
        "ᆬ": "ㄵ",
        "ᆭ": "ㄶ",
        "ᆮ": "ㄷ",
        "ᆯ": "ㄹ",
        "ᆰ": "ㄺ",
        "ᆱ": "ㄻ",
        "ᆲ": "ㄼ",
        "ᆳ": "ㄽ",
        "ᆴ": "ㄾ",
        "ᆵ": "ㄿ",
        "ᆶ": "ㅀ",
        "ᆷ": "ㅁ",
        "ᆸ": "ㅂ",
        "ᆹ": "ㅄ",
        "ᆺ": "ㅅ",
        "ᆻ": "ㅆ",
        "ᆼ": "ㅇ",
        "ᆽ": "ㅈ",
        "ᆾ": "ㅊ",
        "ᆿ": "ㅋ",
        "ᇀ": "ㅌ",
        "ᇁ": "ㅍ",
        "ᇂ": "ㅎ",
    }.get(비호환용_자모, "")


def 초성_찾기(호환용_자모):
    return {
        "ㄱ": "ᄀ",
        "ㄲ": "ᄁ",
        "ㄴ": "ᄂ",
        "ㄷ": "ᄃ",
        "ㄸ": "ᄄ",
        "ㄹ": "ᄅ",
        "ㅁ": "ᄆ",
        "ㅂ": "ᄇ",
        "ㅃ": "ᄈ",
        "ㅅ": "ᄉ",
        "ㅆ": "ᄊ",
        "ㅇ": "ᄋ",
        "ㅈ": "ᄌ",
        "ㅉ": "ᄍ",
        "ㅊ": "ᄎ",
        "ㅋ": "ᄏ",
        "ㅌ": "ᄐ",
        "ㅍ": "ᄑ",
        "ㅎ": "ᄒ",
    }.get(호환용_자모, "")


def 중성_찾기(호환용_자모):
    return {
        "ㅏ": "ᅡ",
        "ㅐ": "ᅢ",
        "ㅑ": "ᅣ",
        "ㅒ": "ᅤ",
        "ㅓ": "ᅥ",
        "ㅔ": "ᅦ",
        "ㅕ": "ᅧ",
        "ㅖ": "ᅨ",
        "ㅗ": "ᅩ",
        "ㅘ": "ᅪ",
        "ㅙ": "ᅫ",
        "ㅚ": "ᅬ",
        "ㅛ": "ᅭ",
        "ㅜ": "ᅮ",
        "ㅝ": "ᅯ",
        "ㅞ": "ᅰ",
        "ㅟ": "ᅱ",
        "ㅠ": "ᅲ",
        "ㅡ": "ᅳ",
        "ㅢ": "ᅴ",
        "ㅣ": "ᅵ",
    }.get(호환용_자모, "")


def 종성_찾기(호환용_자모):
    return {
        "ㄱ": "ᆨ",
        "ㄲ": "ᆩ",
        "ㄳ": "ᆪ",
        "ㄴ": "ᆫ",
        "ㄵ": "ᆬ",
        "ㄶ": "ᆭ",
        "ㄷ": "ᆮ",
        "ㄹ": "ᆯ",
        "ㄺ": "ᆰ",
        "ㄻ": "ᆱ",
        "ㄼ": "ᆲ",
        "ㄽ": "ᆳ",
        "ㄾ": "ᆴ",
        "ㄿ": "ᆵ",
        "ㅀ": "ᆶ",
        "ㅁ": "ᆷ",
        "ㅂ": "ᆸ",
        "ㅄ": "ᆹ",
        "ㅅ": "ᆺ",
        "ㅆ": "ᆻ",
        "ㅇ": "ᆼ",
        "ㅈ": "ᆽ",
        "ㅊ": "ᆾ",
        "ㅋ": "ᆿ",
        "ㅌ": "ᇀ",
        "ㅍ": "ᇁ",
        "ㅎ": "ᇂ",
    }.get(호환용_자모, "")


def 종성_붙이기(글자, 종성):

    성 = 자모_추출(글자)
    if 성.get("종성", None):
        raise Exception(f"Cannot insert 종성 {종성} when one already exists in {글자}")

    return 글자_조합(성["초성"], 성["중성"], 종성)


def 종성_빼기(글자):
    성 = 자모_추출(글자)
    return 글자_조합(성["초성"], 성["중성"])


def 활용모음_가져오기(글자):
    # 모음 조화에 따라 알맞는 활용모음을 제공하는 함수.
    중성 = 자모_추출(글자)["중성"]

    return {
        "ㅏ": "ㅏ",
        "ㅗ": "ㅏ",  # 양성 단모음 -> 아
        "ㅘ": "ㅏ",
        "ㅙ": "ㅏ",
        "ㅚ": "ㅏ",  # 양성 이중 모음 -> 아
        "ㅓ": "ㅓ",
        "ㅜ": "ㅓ",
        "ㅡ": "ㅓ",  # 음성 단모음 -> 어
        "ㅝ": "ㅓ",
        "ㅞ": "ㅓ",
        "ㅟ": "ㅓ",
        "ㅢ": "ㅓ",  # 음성 이중 모음 -> 어
    }.get(
        중성, "ㅓ"
    )  # 기본값을 '어'로 설정


def 종성_바꾸기(글자, 새로운_종성):
    종성_없는_글자 = 종성_빼기(글자)
    return 종성_붙이기(종성_없는_글자, 새로운_종성)


def 어간_불규칙_후보_분석(어간):
    마지막_글자 = 어간[-1]

    # 르 불규칙.
    if 마지막_글자 == "르":

        # '르다'는 단어 안맞아
        if len(어간) < 2:
            return [어간]

        둘째_마지막_글자 = 어간[-2]
        종글자_모음 = 활용모음_가져오기(둘째_마지막_글자)

        # 종성이 없어야하는데 혹시 모르니까 바꾸기 함수를 통해 ㄹ로 바꾼다
        변경_글자 = 종성_바꾸기(둘째_마지막_글자, "ㄹ")
        붙일_종글자 = 글자_조합("ㄹ", 종글자_모음)

        # 치르다, 다다르다 등 있어서 변하지 않은 어간도 반환
        return [어간, 어간[:-2] + 변경_글자 + 붙일_종글자]

    # 르 불규칙은 아니니까 ㅅ,ㅂ,ㄷ 인지 확인해야함
    자모 = 자모_추출(마지막_글자)

    종성 = 자모.get("종성", None)
    if not 종성:
        return [어간]

    후보 = [어간]

    # ㅅ 불규칙
    if 종성 == "ㅅ":
        # (젓)다 => [젓, 저, 저어]
        종성_없는_글자 = 종성_빼기(마지막_글자)

        모음 = 활용모음_가져오기(종성_없는_글자)
        모음_글자 = 글자_조합("ㅇ", 모음)

        후보.append(종성_없는_글자 + 모음_글자)
    elif 종성 == "ㅂ":
        # (춥)다 => [추우], (차갑)다 => [차가우]
        종성_없는_글자 = 종성_빼기(마지막_글자)
        후보.append(종성_없는_글자 + "우")
    elif 종성 == "ㄷ":
        # (걷)다 => [걷, 걸]
        후보.append(종성_바꾸기(마지막_글자, "ㄹ"))

    return 후보


def 이중모음_중성_조립(중성1, 중성2):
    if 중성1 == "ㅗ":
        if 중성2 == "ㅏ":
            return "ㅘ"
        if 중성2 == "ㅐ":
            return "ㅙ"
        if 중성2 == "ㅣ":
            return "ㅚ"
    elif 중성1 == "ㅜ":
        if 중성2 == "ㅓ":
            return "ㅝ"
        if 중성2 == "ㅔ":
            return "ㅞ"
        if 중성2 == "ㅣ":
            return "ㅟ"
    elif 중성1 == "ㅡ":
        if 중성2 == "ㅣ":
            return "ㅢ"

    return None


def 후보용_중성_가져오기(중성1, 중성2):

    이중 = 이중모음_중성_조립(중성1, 중성2)
    if 이중:
        return 이중

    # '-세요'는 kkma에서 따로 반환됨 !
    return {
        # 가다 등
        ("ㅏ", "ㅏ"): "ㅏ",
        # 서다 등
        ("ㅓ", "ㅓ"): "ㅓ",
        # 트다 등
        ("ㅡ", "ㅓ"): "ㅓ",
        # 따르다 등
        ("ㅡ", "ㅏ"): "ㅏ",
        # 시다 등
        ("ㅣ", "ㅓ"): "ㅕ",
        # 대다 등
        ("ㅐ", "ㅓ"): "ㅐ",
    }.get((중성1, 중성2), None)


def 받침_확인(글자):
    return 자모_추출(글자)["종성"]


def 초성_이응_확인(글자):
    return 자모_추출(글자)["초성"] == "ㅇ"


def 어미_붙이기(초활용어, 어미):

    활용어들 = [초활용어]
    임시_활용어들 = []

    for 붙을_글자 in 어미:
        for 활용어 in 활용어들:
            마지막_글자 = 활용어[-1]

            마지막_글자_성 = 자모_추출(마지막_글자)
            붙을_글자_성 = 자모_추출(붙을_글자)

            # ㄹ, ㄴ 같은 호환용자모 있을 경우
            if 호환용_자모_확인(붙을_글자):
                # 알다 + ㄴ 같은 예외 때문에 종성 바꾸기 함수 해야 됨.
                활용어 = 활용어[:-1] + 종성_바꾸기(마지막_글자, 붙을_글자)
                임시_활용어들.append(활용어)

            # 마지막 글자 받침이 없고 붙을 글자 초성이 ㅇ이면 이중모음을 만들어야함
            # 보- + -아 = [보아, 봐]
            elif (
                not 받침_확인(마지막_글자)
                and 초성_이응_확인(붙을_글자)
            ):
                # 초중종성을 추출
                마지막_글자_성 = 자모_추출(마지막_글자)
                붙을_글자_성 = 자모_추출(붙을_글자)

                # 합체글자 조립
                합체_중성 = 후보용_중성_가져오기(
                    마지막_글자_성["중성"], 붙을_글자_성["중성"]
                )

                if 합체_중성:
                    합체_초성 = 마지막_글자_성["초성"]
                    합체_종성 = 붙을_글자_성["종성"]
                    신모음_글자 = 글자_조합(합체_초성, 합체_중성, 합체_종성)
                    # 두개 다 들어넣기 .
                    임시_활용어들.extend(
                        [활용어 + 붙을_글자, 활용어[:-1] + 신모음_글자]
                    )
                else:
                    임시_활용어들.append(활용어 + 붙을_글자)

            # 알다 -> 아는데, 등.
            elif 마지막_글자_성["종성"] == "ㄹ" and 붙을_글자_성["초성"] == "ㄴ":
                임시_활용어들.extend(
                    [
                        # 리을을 빼낸 활용어에다 붙이기
                        활용어[:-1] + 종성_빼기(마지막_글자) + 붙을_글자,
                        # 평범.
                        활용어 + 붙을_글자,
                    ]
                )

            else:
                임시_활용어들.append(활용어 + 붙을_글자)

        활용어들 = 임시_활용어들
        임시_활용어들 = []

    return 활용어들


def 교착(어간, 어미_리스트):

    활용어들 = 어간_불규칙_후보_분석(어간)
    임시_활용어들 = []

    for 어미 in 어미_리스트:
        for 활용어 in 활용어들:
            새로운_활용어들 = 어미_붙이기(활용어, 어미)
            임시_활용어들.extend(새로운_활용어들)
        활용어들 = 임시_활용어들
        임시_활용어들 = []

    return 활용어들
